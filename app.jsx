const {useEffect,useMemo,useState}=React;

// Vive Room Manager — compact (≤250 lines), hardened, fixed export & syntax
const STORAGE_KEY="vive-rooms-data:v1";const CLEANING_SUGGESTIONS=["Room dusty","Bathroom smells","Shower mold","Shower silicone","Descale kettle","Microwave needs clean","Fridge needs clean","Dust vents","Clean wall near bin","Room smells","Limescale on shower head","Beds Need making","Bird Poop","Bath Towels","Shower Stinks","Needs full clean"];const MAINT_SUGGESTIONS=["Lightbulb","Door lock battery","Toilet seat loose","Tap loose","Shower leaks","Blinds chain broken","Window lock broken"];const INVENTORY_SUGGESTIONS=["Bath towels","Hand towel","Pillow","Toaster","Kettle","Iron","Ironing Board","Hairdryer","Mugs","Glasses","Wine Glasses","Kitchen towel","Toilet roll","Washing up Liquid","White box under sink ","Salt & Pepper Pot","Chopping board"];const CLEANING_PRIORITY=["Needs full clean","Beds Need making"];const DEFAULT_SAMPLE=[{room:201,floor:2,category:"Double",wifi:{shouldHave:false,has:true},aircon:{shouldHave:true,has:true},dyson:{shouldHave:false,has:false},keys:{guestKeysPresent:1,guestKeysMissing:1,masterKeyPresent:0,masterKeyMissing:1},issues:{cleaning:[],maintenance:[]},missingItems:[]}];const THEME={page:"#FFFBEB",headerFrom:"#FEF3C7",headerTo:"#FDE68A",primary:"#F59E0B",primaryDark:"#D97706",accent:"#B45309",border:"#FDE68A"};
const clsx=(...xs)=>xs.filter(Boolean).join(" ");const arr=(x)=>Array.isArray(x)?x:[];const clamp=(n,lo,hi)=>Math.max(lo,Math.min(hi,Number.isFinite(+n)?+n:lo));const fac=(f)=>({shouldHave:!!(f?.shouldHave),has:!!(f?.has)});const hasKeyProblem=(r)=>((r?.keys?.guestKeysMissing??0)+(r?.keys?.masterKeyMissing??0))>0,hasCleaningIssue=(r)=>arr(r?.issues?.cleaning).length>0,hasMaintIssue=(r)=>arr(r?.issues?.maintenance).length>0,hasInventoryMissing=(r)=>arr(r?.missingItems).length>0,hasAnyIssue=(r)=>hasCleaningIssue(r)||hasMaintIssue(r)||hasInventoryMissing(r)||hasKeyProblem(r),hasNoIssues=(r)=>!hasAnyIssue(r);const ensureShapes=(r)=>{const gm=clamp(r?.keys?.guestKeysMissing??0,0,2),mm=clamp(r?.keys?.masterKeyMissing??0,0,1);return{room:r?.room??r?.id??0,floor:r?.floor??0,category:r?.category??r?.type??"",wifi:fac(r?.wifi),aircon:fac(r?.aircon),dyson:fac(r?.dyson),keys:{guestKeysMissing:gm,masterKeyMissing:mm,guestKeysPresent:Math.max(0,2-gm),masterKeyPresent:Math.max(0,1-mm)},issues:{cleaning:arr(r?.issues?.cleaning),maintenance:arr(r?.issues?.maintenance)},missingItems:arr(r?.missingItems)}};function useLocalState(key,initial,debounceMs=250){const[v,setV]=useState(()=>{try{const t=localStorage.getItem(key);return t?JSON.parse(t):initial;}catch{return initial;}});useEffect(()=>{const id=setTimeout(()=>{try{localStorage.setItem(key,JSON.stringify(v));}catch{}},debounceMs);return()=>clearTimeout(id);},[key,v,debounceMs]);return[v,setV];}
const ISSUE_DEFS={cleaning:{id:"cleaning",label:"Cleaning",select:(r)=>arr(r?.issues?.cleaning),suggestions:CLEANING_SUGGESTIONS,get:(d)=>arr(d?.issues?.cleaning),push:(d,v)=>{d.issues=d.issues||{cleaning:[],maintenance:[]};d.issues.cleaning.push(v)},remove:(d,i)=>d.issues.cleaning.splice(i,1)},maintenance:{id:"maintenance",label:"Maintenance",select:(r)=>arr(r?.issues?.maintenance),suggestions:MAINT_SUGGESTIONS,get:(d)=>arr(d?.issues?.maintenance),push:(d,v)=>{d.issues=d.issues||{cleaning:[],maintenance:[]};d.issues.maintenance.push(v)},remove:(d,i)=>d.issues.maintenance.splice(i,1)},inventory:{id:"inventory",label:"Missing Items",select:(r)=>arr(r?.missingItems),suggestions:INVENTORY_SUGGESTIONS,get:(d)=>arr(d?.missingItems),push:(d,v)=>{d.missingItems=arr(d.missingItems);d.missingItems.push(v)},remove:(d,i)=>d.missingItems.splice(i,1)}};
function App(){const[rooms,setRooms]=useState([]),[search,setSearch]=useLocalState("vive-ui-search",""),[floor,setFloor]=useLocalState("vive-ui-floor","All"),[view,setView]=useLocalState("vive-ui-view","cards"),[searchQ,setSearchQ]=useState(""),[subFilters,setSubFilters]=useLocalState("vive-ui-subfilters",{}),[editor,setEditor]=useState(null);useEffect(()=>{const id=setTimeout(()=>setSearchQ(search),150);return()=>clearTimeout(id);},[search]);useEffect(()=>{try{const raw=localStorage.getItem(STORAGE_KEY);if(raw){const p=JSON.parse(raw);const rows=Array.isArray(p)?p:Array.isArray(p?.rooms)?p.rooms:[];if(rows.length){setRooms(rows.map(ensureShapes));return;}}}catch{}setRooms(DEFAULT_SAMPLE.map(ensureShapes));},[]);useEffect(()=>{const id=setTimeout(()=>{try{localStorage.setItem(STORAGE_KEY,JSON.stringify(rooms));}catch{}},600);return()=>clearTimeout(id);},[rooms]);useEffect(()=>{try{runSelfTests();}catch(e){console.warn("Self-tests wrapper error:",e)}},[]);useEffect(()=>{'serviceWorker'in navigator&&navigator.serviceWorker.register('./sw.js').catch(()=>{});},[]);
const floors=useMemo(()=>['All',...Array.from(new Set(arr(rooms).map(r=>r?.floor).filter(Number.isFinite))).sort((a,b)=>a-b)],[rooms]);const sorted=useMemo(()=>arr(rooms).map(ensureShapes).sort((a,b)=>(a.floor-b.floor)||(a.room-b.room)),[rooms]);const baseFiltered=useMemo(()=>{const q=String(searchQ).trim().toLowerCase();return sorted.filter(r=>(floor==='All'||String(r.floor)===String(floor))&&(!q||String(r.room).toLowerCase().includes(q)));},[sorted,floor,searchQ]);const filtered=baseFiltered;const quickCounts=useMemo(()=>{let k=0,c=0,m=0,i=0,n=0;for(const r of baseFiltered){const kp=hasKeyProblem(r),cl=hasCleaningIssue(r),mt=hasMaintIssue(r),iv=hasInventoryMissing(r);if(kp)k++;if(cl)c++;if(mt)m++;if(iv)i++;if(!(kp||cl||mt||iv))n++;}return{keys:k,cleaning:c,maintenance:m,inventory:i,noissues:n};},[baseFiltered]);const resetFilters=()=>{setSearch("");setFloor("All")};const openEditor=(index)=>{const base=sorted[index];if(!base)return;setEditor({index,draft:ensureShapes(JSON.parse(JSON.stringify(base)))})};const closeEditor=(save)=>{if(!editor)return;if(save)setRooms(p=>arr(p).map(r=>r.room===editor.draft.room?ensureShapes(editor.draft):r));setEditor(null)};const updateDraft=(mut)=>setEditor(ed=>ed?{...ed,draft:mut({...ensureShapes(ed.draft)})}:ed);const exportRooms=async()=>{try{const ts=new Date().toISOString().replace(/[:.]/g,'-');const json=JSON.stringify({rooms:arr(rooms).map(ensureShapes)},null,2);const blob=new Blob([json],{type:'application/json'});const name='vive-rooms-'+ts+'.json';if(window.showSaveFilePicker&&window.isSecureContext){const h=await window.showSaveFilePicker({suggestedName:name,types:[{description:'JSON',accept:{'application/json':['.json']}}]});const w=await h.createWritable();await w.write(blob);await w.close();return;}if(navigator.canShare&&navigator.share&&window.File&&navigator.canShare({files:[new File([blob],name,{type:'application/json'})]})){await navigator.share({files:[new File([blob],name,{type:'application/json'})],title:name});return;}const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=name;document.body.appendChild(a);a.click();a.remove();setTimeout(()=>URL.revokeObjectURL(url),1500);}catch(e){alert('Export failed: '+(e?.message||e));}};
const lists={cleaning:useMemo(()=>baseFiltered.filter(hasCleaningIssue),[baseFiltered]),maintenance:useMemo(()=>baseFiltered.filter(hasMaintIssue),[baseFiltered]),inventory:useMemo(()=>baseFiltered.filter(hasInventoryMissing),[baseFiltered])};const tagCounts=(rows,get)=>{const m=new Map();arr(rows).forEach(r=>arr(get(r)).forEach(t=>m.set(t,(m.get(t)||0)+1)));return Array.from(m,([tag,count])=>({tag,count})).sort((a,b)=>(b.count-a.count)||a.tag.localeCompare(b.tag));};const tags={cleaning:useMemo(()=>{const list=tagCounts(lists.cleaning,ISSUE_DEFS.cleaning.select),pri=CLEANING_PRIORITY,idx=t=>{const i=pri.indexOf(t);return i===-1?pri.length:i;};return list.sort((a,b)=>(idx(a.tag)-idx(b.tag))||(b.count-a.count)||a.tag.localeCompare(b.tag));},[lists.cleaning]),maintenance:useMemo(()=>tagCounts(lists.maintenance,ISSUE_DEFS.maintenance.select),[lists.maintenance]),inventory:useMemo(()=>tagCounts(lists.inventory,ISSUE_DEFS.inventory.select),[lists.inventory])};const selected={cleaning:arr(subFilters?.cleaning),maintenance:arr(subFilters?.maintenance),inventory:arr(subFilters?.inventory)};const rowsFiltered={cleaning:useMemo(()=>selected.cleaning.length?lists.cleaning.filter(r=>arr(ISSUE_DEFS.cleaning.select(r)).some(t=>selected.cleaning.includes(t))):lists.cleaning,[lists.cleaning,selected.cleaning]),maintenance:useMemo(()=>selected.maintenance.length?lists.maintenance.filter(r=>arr(ISSUE_DEFS.maintenance.select(r)).some(t=>selected.maintenance.includes(t))):lists.maintenance,[lists.maintenance,selected.maintenance]),inventory:useMemo(()=>selected.inventory.length?lists.inventory.filter(r=>arr(ISSUE_DEFS.inventory.select(r)).some(t=>selected.inventory.includes(t))):lists.inventory,[lists.inventory,selected.inventory])};const setSelected=(k,list)=>setSubFilters(v=>({...v,[k]:list}));useEffect(()=>{if(view==='cleaning'&&!arr(subFilters?.cleaning).length&&tags.cleaning.length)setSubFilters(v=>({...v,cleaning:[tags.cleaning[0].tag]}));if(view==='maintenance'&&!arr(subFilters?.maintenance).length&&tags.maintenance.length)setSubFilters(v=>({...v,maintenance:[tags.maintenance[0].tag]}));if(view==='inventory'&&!arr(subFilters?.inventory).length&&tags.inventory.length)setSubFilters(v=>({...v,inventory:[tags.inventory[0].tag]}));},[view,tags.cleaning,tags.maintenance,tags.inventory]);
const handleEdit=React.useCallback((roomNo)=>{const idx=sorted.findIndex(x=>x.room===roomNo);openEditor(idx);},[sorted]);const keysRows=useMemo(()=>baseFiltered.filter(hasKeyProblem).sort((a,b)=>{const ga=(b?.keys?.guestKeysMissing??0)-(a?.keys?.guestKeysMissing??0);if(ga)return ga;const mb=(b?.keys?.masterKeyMissing??0)-(a?.keys?.masterKeyMissing??0);if(mb)return mb;return a.room-b.room;}),[baseFiltered]);
return(<div className="min-h-screen text-zinc-900" style={{backgroundColor:THEME.page}}>
  <Header theme={THEME} floors={floors} floor={floor} setFloor={setFloor} search={search} setSearch={setSearch} resetFilters={resetFilters} counts={quickCounts} view={view} setView={setView} onImport={(rows)=>{const shaped=arr(rows).map(ensureShapes);setRooms(shaped);try{localStorage.setItem(STORAGE_KEY,JSON.stringify(shaped));}catch{}}} shownCount={filtered.length} totalCount={rooms.length} onExport={exportRooms} />
  {view==='cards'?<main className={clsx("max-w-7xl mx-auto px-3 py-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4","gap-2")}>{arr(filtered).map(r=><RoomCard key={r.room} room={r} onEdit={handleEdit}/>)}{!filtered.length&&<div className="col-span-full text-center text-zinc-700">No rooms match your filters.</div>}</main>:
  <section className="max-w-7xl mx-auto px-3 py-3 space-y-3">
    {view==='keys'&&<ListTable title="Rooms with missing keys" theme={THEME} rows={keysRows} head={<><th className="text-left px-3 py-2 text-xs uppercase tracking-wide">Room</th><th className="text-left px-3 py-2 text-xs uppercase tracking-wide">Keys</th><th></th></>} render={r=>(<tr key={r.room} className="border-b"><CellRoom r={r}/><td className="px-3 py-2 text-sm"><span className="px-2.5 py-1 rounded-full border bg-white text-xs shadow-sm">{keySummaryText(r)}</span></td><td className="px-3 py-2 text-right"><EditBtn onClick={()=>handleEdit(r.room)}/></td></tr>)}/>}
    {['cleaning','maintenance','inventory'].map(id=>view===id&&<IssuesQuickView key={id} id={id} title={`Rooms with ${ISSUE_DEFS[id].label.toLowerCase()} issues`} rows={rowsFiltered[id]} tags={tags[id]} selected={selected[id]} onChange={sel=>setSelected(id,sel)} openEditor={handleEdit} theme={THEME}/>) }
    {view==='noissues'&&<ListTable title="Rooms with no issues" theme={THEME} rows={baseFiltered.filter(hasNoIssues)} head={<><th className="text-left px-3 py-2 text-xs uppercase tracking-wide">Room</th><th className="text-left px-3 py-2 text-xs uppercase tracking-wide">Status</th><th></th></>} render={r=>(<tr key={r.room} className="border-b"><CellRoom r={r}/><td className="px-3 py-2"><span className="px-2 py-1 rounded-full bg-white/60 text-zinc-800 text-xs font-medium">All good</span></td><td className="px-3 py-2 text-right"><EditBtn onClick={()=>handleEdit(r.room)}/></td></tr>)}/>}
  </section>}
  {editor&&<EditorModal draft={editor.draft} setDraft={fn=>updateDraft(fn)} onClose={()=>closeEditor(false)} onSave={()=>closeEditor(true)} theme={THEME}/>}
</div>);}
function Header({theme,floors,floor,setFloor,search,setSearch,resetFilters,counts,view,setView,onImport,shownCount,totalCount,onExport}){const[savedTick,setSavedTick]=useState(false);const[deferred,setDeferred]=useState(null);useEffect(()=>{const h=e=>{e.preventDefault();setDeferred(e)};window.addEventListener('beforeinstallprompt',h);return()=>window.removeEventListener('beforeinstallprompt',h);},[]);const doInstall=async()=>{try{if(deferred){deferred.prompt();await deferred.userChoice;setDeferred(null);}}catch{}};const fileRef=React.useRef(null);const pickFile=()=>fileRef.current?.click();const handleFile=async e=>{const f=e.target.files?.[0];if(!f)return;try{const text=await f.text();const data=JSON.parse(text);const rows=Array.isArray(data)?data:(Array.isArray(data?.rooms)?data.rooms:[]);if(!rows.length){alert('JSON must be an array of rooms or {\"rooms\": [...]}');return;}onImport(rows);setSavedTick(true);setTimeout(()=>setSavedTick(false),1500);}catch(err){alert('Failed to import JSON: '+(err?.message||err));}finally{e.target.value='';}};return(<header className="sticky top-0 z-10 border-b" style={{background:`linear-gradient(to right, ${theme.headerFrom}, ${theme.headerTo})`,borderColor:theme.border}}><div className="max-w-7xl mx-auto px-3 py-2 flex items-center gap-2"><h1 className="text-xl font-bold" style={{color:theme.accent}}>Vive Room Manager</h1><div className="ml-auto flex items-center gap-2"><input ref={fileRef} type="file" accept=".json,application/json" className="hidden" onChange={handleFile}/>{savedTick&&<span className="px-2 py-1 rounded-lg border bg-white text-xs text-green-700 border-green-300">Saved ✓</span>}<button onClick={pickFile} className="px-3 py-1.5 rounded-xl bg-white border shadow">Import JSON</button>{deferred&&<button onClick={doInstall} className="px-3 py-1.5 rounded-xl bg-white border shadow">Install App</button>}<button onClick={()=>{onExport();setSavedTick(true);setTimeout(()=>setSavedTick(false),1200);}} className="px-3 py-1.5 rounded-xl bg-white border shadow">Export JSON</button></div></div><div className="max-w-7xl mx-auto px-3 pb-2"><div className="flex items-center gap-2"><input value={search} onChange={e=>setSearch(e.target.value)} placeholder="Room #" className="w-28 sm:w-36 px-2 py-1.5 text-sm rounded-xl border bg-white shadow-inner"/><select value={floor} onChange={e=>setFloor(e.target.value)} className="px-3 py-1.5 rounded-xl border bg-white shadow-inner">{arr(floors).map(f=><option key={String(f)} value={f}>{f==='All'?'All floors':'Floor '+f}</option>)}</select><span className="ml-auto text-sm opacity-80">{shownCount} shown{typeof totalCount==='number'?' / '+totalCount:''}</span><button onClick={resetFilters} className="text-xs underline opacity-80">Reset</button></div><ViewTabs view={view} setView={setView} counts={counts} theme={theme}/></div></header>);} 
function ViewTabs({view,setView,counts,theme}){const tabs=[{id:'cards',label:'Cards'},{id:'keys',label:`Missing Keys (${counts.keys})`},{id:'cleaning',label:`Cleaning Issues (${counts.cleaning})`},{id:'maintenance',label:`Maintenance (${counts.maintenance})`},{id:'inventory',label:`Missing Inventory (${counts.inventory})`},{id:'noissues',label:`No Issues (${counts.noissues})`}];return(<div className="pt-2"><div className="inline-flex flex-wrap gap-2 p-1 rounded-xl border bg-white/70 shadow-sm" style={{borderColor:theme.border}}>{tabs.map(t=>(<button key={t.id} onClick={()=>setView(t.id)} className={clsx('px-3 py-1.5 rounded-lg text-sm border',view===t.id?'text-white':'bg-white')} style={view===t.id?{backgroundColor:theme.primary,borderColor:theme.primaryDark}:{borderColor:theme.border}}>{t.label}</button>))}</div><div className="text-xs opacity-70 mt-1">Quick Views respect search & floor.</div></div>);} 
const keySummaryText=r=>{const gm=r?.keys?.guestKeysMissing??0,mm=r?.keys?.masterKeyMissing??0;let t='';if(gm>=2)t='Missing both guest keys';else if(gm===1)t='Missing 1 guest key';if(mm>0)t+=(t?' + master':'Missing master key');return t||'All keys present'};function ListTable({title,head,rows,render,filters,theme}){return(<div className="rounded-2xl bg-white shadow-sm overflow-hidden border" style={{borderColor:theme.border}}><div className="px-4 py-3 border-b font-semibold flex items-center justify-between" style={{background:`linear-gradient(to right, ${theme.headerFrom}, ${theme.headerTo})`,borderColor:theme.border,color:theme.accent}}><span>{title}</span></div>{filters&&(<div className="px-4 py-2" style={{backgroundColor:THEME.page,borderBottom:`1px solid ${theme.border}`}}>{filters}</div>)}<div className="overflow-x-auto"><table className="min-w-full"><thead><tr>{head}</tr></thead><tbody className="divide-y">{arr(rows).map(render)}</tbody></table></div>{arr(rows).length===0&&(<div className="p-4 text-center opacity-80">Nothing to show.</div>)}</div>);} 
function TagFilterBar({tags,selected,onChange,hint,theme}){const[q,sQ]=useState("");const shown=useMemo(()=>{const s=q.trim().toLowerCase();return s?arr(tags).filter(t=>t.tag.toLowerCase().includes(s)):arr(tags);},[tags,q]);const toggle=tag=>onChange(selected.includes(tag)?[]:[tag]);return(<div className="flex flex-col gap-2"><div className="flex items-center gap-2"><input value={q} onChange={e=>sQ(e.target.value)} placeholder="Filter tags…" className="px-2 py-1 rounded-lg border bg-white shadow-inner text-sm"/>{selected.length>0&&<button onClick={()=>onChange([])} className="text-xs underline opacity-80">Clear</button>}<span className="text-xs opacity-70 ml-auto">{hint}</span></div><div className="flex flex-wrap gap-2">{shown.map(({tag,count})=>{const a=selected.includes(tag);return(<button key={tag} onClick={()=>toggle(tag)} className={clsx('px-2.5 py-1.5 rounded-full border text-xs shadow-sm',a?'text-white':'bg-white')} style={a?{backgroundColor:theme.primary,borderColor:theme.primaryDark}:{borderColor:theme.border}} title={`${count} room${count!==1?'s':''}`}>{tag} <span className="opacity-70">({count})</span></button>);})}{shown.length===0&&<span className="text-xs opacity-70">No tags found.</span>}</div></div>);} 
function IssuesQuickView({id,title,rows,tags,selected,onChange,openEditor,theme}){const def=ISSUE_DEFS[id];return(<ListTable title={title} theme={theme} filters={<TagFilterBar theme={theme} tags={tags} selected={selected} onChange={onChange} hint={`Click ${def.label.toLowerCase()} tags to filter. Rooms that match the selected tag.`}/>} rows={rows} head={<><th className="text-left px-3 py-2 text-xs uppercase tracking-wide">Room</th><th className="text-left px-3 py-2 text-xs uppercase tracking-wide">{def.label}</th><th></th></>} render={r=>(<tr key={r.room}><CellRoom r={r}/><td className="px-3 py-2"><div className="flex flex-wrap gap-2">{arr(def.select(r)).map((t,i)=>(<Tag key={i}>{t}</Tag>))}</div></td><td className="px-3 py-2 text-right"><EditBtn onClick={()=>openEditor(r.room)} theme={theme}/></td></tr>)}/>);} 
const CellRoom=({r})=>(<td className="px-3 py-2"><div className="font-medium">Room {r.room}</div><div className="text-xs opacity-70">Floor {r.floor} – {r.category}</div></td>);const EditBtn=({onClick})=>(<button onClick={onClick} className="px-3 py-1.5 rounded-lg text-white shadow" style={{backgroundColor:THEME.primary}}>Edit</button>);const Tag=({children})=>(<span className="px-2.5 py-1 rounded-full border bg-white text-xs shadow-sm">{children}</span>);const KeyChecklist=({room})=>{const gm=room?.keys?.guestKeysMissing??0,mm=room?.keys?.masterKeyMissing??0;const items=[{label:"Guest key 1",missing:gm>=1},{label:"Guest key 2",missing:gm>=2},{label:"Master key",missing:mm>0}];return(<div className="grid grid-cols-3 gap-1">{items.map((it,i)=>(<KeyChip key={i} label={it.label} missing={it.missing}/>))}</div>)};const KeyChip=({label,missing})=>{const cls=missing?'bg-red-100 text-red-800 border-red-300':'bg-green-100 text-green-800 border-green-300';return(<span className={clsx("px-2 py-1 rounded-full border text-xs shadow-sm text-center",cls)}>{label} {missing?"missing":"OK"}</span>)};const IssueTag=({text})=>(<span className="px-2.5 py-1 rounded-full border bg-white text-xs shadow-sm">{text}</span>);
const RoomCard=React.memo(function RoomCard({room,onEdit}){const k=room?.keys||{guestKeysMissing:0,masterKeyMissing:0};const keysMissing=(k.guestKeysMissing||0)+(k.masterKeyMissing||0);const noIssues=!hasCleaningIssue(room)&&!hasMaintIssue(room)&&!hasInventoryMissing(room)&&keysMissing===0;const issueSources=[["cleaning",room?.issues?.cleaning],["maintenance",room?.issues?.maintenance],["inventory",room?.missingItems]];return(<article className="h-full flex flex-col rounded-2xl bg-white shadow-sm overflow-hidden border" style={{borderColor:THEME.border,borderLeftWidth:4,borderLeftColor:THEME.accent}}><div className="p-2" style={{background:`linear-gradient(to right, ${THEME.headerFrom}, ${THEME.headerTo})`,borderBottom:`1px solid ${THEME.border}`}}><div className="flex items-start gap-2"><div className="flex-1"><div className="text-base font-bold" style={{color:THEME.accent}}>Room {room.room}</div><div className="text-xs opacity-70">Floor {room.floor} – {room.category}</div></div><button onClick={()=>onEdit(room.room)} className="px-2 py-1 text-xs rounded-lg text-white shadow" style={{backgroundColor:THEME.primary}}>Edit</button></div></div><div className="p-2" style={{backgroundColor:THEME.page}}><div className="text-xs uppercase tracking-wide" style={{color:THEME.accent}}>Facilities</div><div className="mt-2 grid grid-cols-3 gap-1">{[['Wi‑Fi',room?.wifi],['Aircon',room?.aircon],['Dyson',room?.dyson]].map(([label,f],i)=>{const v=f||{shouldHave:false,has:false};const state=!v.shouldHave?'na':(v.has?'ok':'bad');const style=state==='ok'?'bg-green-100 text-green-800 border-green-300':(state==='bad'?'bg-red-100 text-red-800 border-red-300':'bg-zinc-100 text-zinc-500 border-zinc-200');const text=state==='na'?label+': N/A':label;return(<span key={i} className={clsx('w-full justify-center whitespace-nowrap','px-2 py-1 text-xs rounded-full border shadow-sm inline-flex items-center',style)}>{text}</span>)})}</div></div><div style={{borderTop:`1px solid ${THEME.border}`}}/><div className="p-2" style={{backgroundColor:THEME.page}}><div className="text-xs uppercase tracking-wide" style={{color:THEME.accent}}>Keys</div><div className="mt-2"><KeyChecklist room={room}/></div></div><div style={{borderTop:`1px solid ${THEME.border}`}}/><div className="p-2 pb-1 flex-1 rounded-b-2xl" style={{backgroundColor:THEME.page}}><div className="text-xs uppercase tracking-wide" style={{color:THEME.accent}}>Issues</div><div className="mt-2 flex flex-wrap gap-2">{issueSources.flatMap(([kind,list])=>arr(list).map((t,i)=>(<IssueTag key={`${kind}-${i}`} text={t}/>)))} {noIssues&&<span className="px-2.5 py-1 rounded-full bg-white/60 text-zinc-900 font-medium text-xs shadow-inner">No issues 🎉</span>}</div></div></article>)});
function EditorModal(p){useEffect(()=>{const onKey=e=>{if(e.key==='Escape')p.onClose();};window.addEventListener('keydown',onKey);return()=>window.removeEventListener('keydown',onKey);},[p.onClose]);const d=p.draft;return(<div className="fixed inset-0 z-50 flex items-start justify-center p-4 sm:p-6"><div className="absolute inset-0 bg-black/30" onClick={p.onClose}/><div className="relative w-full max-w-3xl rounded-2xl bg-white shadow-xl border flex flex-col max-h-[calc(100vh-2rem)] sm:max-h-[calc(100vh-4rem)]"><div className="flex items-center justify-between p-3 border-b"><div><div className="text-lg font-bold">Edit Room {d.room}</div><div className="text-sm opacity-70">Floor {d.floor} – {d.category}</div></div><button onClick={p.onClose} aria-label="Close" className="px-2.5 py-1.5 rounded-lg bg-white border text-zinc-800 hover:bg-zinc-50">✕</button></div><div className="p-4 space-y-6 overflow-y-auto"><section><h3 className="text-sm font-semibold">Facilities</h3><div className="mt-3 grid grid-cols-1 sm:grid-cols-3 gap-3">{['wifi','aircon','dyson'].map(k=>(<FacilityEditorRow key={k} label={{wifi:'Wi‑Fi',aircon:'Aircon',dyson:'Dyson'}[k]} value={d[k]} onChange={next=>p.setDraft(dd=>{dd[k]=next;return dd;})}/>))}</div></section><section><h3 className="text-sm font-semibold">Keys</h3><div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-3"><KeyTileEditor label="Guest keys missing" value={d.keys?.guestKeysMissing??0} max={2} onChange={n=>p.setDraft(dd=>{dd.keys=dd.keys||{};dd.keys.guestKeysMissing=n;dd.keys.guestKeysPresent=Math.max(0,2-n);return dd;})}/><KeyTileEditor label="Master key missing" value={d.keys?.masterKeyMissing??0} max={1} onChange={n=>p.setDraft(dd=>{dd.keys=dd.keys||{};dd.keys.masterKeyMissing=n;dd.keys.masterKeyPresent=Math.max(0,1-n);return dd;})}/></div></section><section><h3 className="text-sm font-semibold">Issues</h3><div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-4">{Object.values(ISSUE_DEFS).map(def=>(<IssueColumn key={def.id} title={def.label} items={def.get(d)} onRemove={i=>p.setDraft(dd=>{def.remove(dd,i);return dd;})} onAdd={v=>p.setDraft(dd=>{def.push(dd,v);return dd;})} suggestions={def.suggestions}/>))}</div></section></div><div className="p-3 border-t flex justify-end gap-2"><button onClick={p.onClose} className="px-4 py-2 rounded-xl border bg-white">Cancel</button><button onClick={p.onSave} className="px-4 py-2 rounded-xl text-white" style={{backgroundColor:THEME.primary}}>Save</button></div></div></div>)}
function FacilityEditorRow(p){const v=p.value||{shouldHave:false,has:false};return(<div className="p-3 rounded-xl border bg-white shadow-sm"><div className="text-sm font-medium">{p.label}</div><div className="mt-1 text-xs opacity-70">Required: <b>{v.shouldHave?'Yes':'No'}</b> (locked)</div><div className="mt-2 flex items-center gap-2"><span className="text-sm">Present:</span><button onClick={()=>p.onChange({shouldHave:v.shouldHave,has:!v.has})} className={clsx('px-3 py-1.5 rounded-lg border text-sm',v.has?'bg-green-100 border-green-300 text-green-800':'bg-red-100 border-red-300 text-red-800')}>{v.has?'Yes':'No'}</button></div></div>)}
function KeyTileEditor(p){const dec=()=>p.onChange(clamp(p.value-1,0,p.max));const inc=()=>p.onChange(clamp(p.value+1,0,p.max));return(<div className="p-3 rounded-xl border bg-white shadow-sm"><div className="text-sm font-medium">{p.label}</div><div className="mt-1 text-xs opacity-70">Allowed: 0–{p.max}</div><div className="mt-2 flex items-center gap-2"><button onClick={dec} className="px-3 py-1.5 rounded-lg border bg-white hover:bg-zinc-50">−</button><input type="number" min={0} max={p.max} value={p.value} onChange={e=>p.onChange(clamp(e.target.value,0,p.max))} className="w-20 text-center px-3 py-2 rounded-lg border bg-white shadow-inner"/><button onClick={inc} className="px-3 py-1.5 rounded-lg border bg-white hover:bg-zinc-50">+</button><span className="text-xs opacity-70">Missing</span></div></div>)}
function IssueColumn(p){const[t,sT]=useState("");const add=v=>{const s=String(v??t).trim();if(!s)return;p.onAdd(s);sT("")};const list=arr(p.items);return(<div className="p-3 rounded-xl border bg-white shadow-sm flex flex-col"><div className="text-sm font-medium">{p.title}</div><div className="mt-2 flex flex-wrap gap-2">{list.map((x,i)=>(<button key={i} onClick={()=>p.onRemove(i)} title="Click to remove" className="px-3 py-1.5 rounded-full border bg-white text-sm shadow-sm hover:bg-zinc-50">{x} ✕</button>))}{list.length===0&&<span className="text-sm opacity-70">No {String(p.title).toLowerCase()}.</span>}</div><div className="mt-3 flex gap-2 flex-wrap items-stretch"><input value={t} onChange={e=>sT(e.target.value)} placeholder={'Add '+String(p.title).toLowerCase()+'…'} className="flex-1 min-w-0 px-3 py-2 rounded-lg border bg-white shadow-inner"/><button onClick={()=>add()} className="px-3 py-2 rounded-lg text-white shadow shrink-0 whitespace-nowrap" style={{backgroundColor:THEME.primary}}>Add</button></div><div className="mt-3 flex flex-wrap gap-2">{arr(p.suggestions).map((s,i)=>(<button key={i} onClick={()=>add(s)} className="px-2.5 py-1.5 rounded-full border bg-white text-xs hover:bg-zinc-50">+ {s}</button>))}</div></div>)}
function runSelfTests(){const R=[];const ok=(n,c)=>R.push({n,pass:!!c});const t1=ensureShapes({room:1,floor:1,wifi:{},aircon:{},dyson:{},issues:{cleaning:[],maintenance:[]},missingItems:[],keys:{guestKeysMissing:2,masterKeyMissing:1}});ok('ensureShapes key math',t1.keys.guestKeysPresent===0&&t1.keys.masterKeyPresent===0);ok('keySummaryText examples',keySummaryText({keys:{guestKeysMissing:2,masterKeyMissing:0}}).includes('both')&&keySummaryText({keys:{guestKeysMissing:1,masterKeyMissing:1}}).includes('1 guest'));try{const _=(ISSUE_DEFS.cleaning.suggestions||[]).slice(0,2);ok('tags suggestions array',Array.isArray(_));}catch{ok('tags suggestions array',false);}const t2=ensureShapes({room:9,floor:1});ok('ensureShapes default arrays',Array.isArray(t2.issues.cleaning)&&Array.isArray(t2.issues.maintenance)&&Array.isArray(t2.missingItems));ok('keySummaryText all good',keySummaryText({keys:{guestKeysMissing:0,masterKeyMissing:0}})==='All keys present');const rClean={issues:{cleaning:['Needs full clean'],maintenance:[]},missingItems:[],keys:{guestKeysMissing:0,masterKeyMissing:0}};ok('hasAnyIssue true for cleaning',hasAnyIssue(rClean));const rNone={issues:{cleaning:[],maintenance:[]},missingItems:[],keys:{guestKeysMissing:0,masterKeyMissing:0}};ok('hasNoIssues true when none',hasNoIssues(rNone));const roomsForSort=[{room:300,keys:{guestKeysMissing:0,masterKeyMissing:1}},{room:101,keys:{guestKeysMissing:2,masterKeyMissing:0}},{room:205,keys:{guestKeysMissing:1,masterKeyMissing:1}}];const sortedBySeverity=[...roomsForSort].sort((a,b)=>{const ga=(b.keys?.guestKeysMissing??0)-(a.keys?.guestKeysMissing??0);if(ga)return ga;const mb=(b.keys?.masterKeyMissing??0)-(a.keys?.masterKeyMissing??0);if(mb)return mb;return a.room-b.room;});ok('keys severity sort',sortedBySeverity[0].room===101&&sortedBySeverity[1].room===205&&sortedBySeverity[2].room===300);ok('arr(undefined) safe',Array.isArray(arr(undefined))&&arr(undefined).length===0);ok('ISSUE_DEFS.select safe',Array.isArray(ISSUE_DEFS.cleaning.select({issues:null})));ok('tagCounts safe on malformed',(()=>{try{const tc=(rows,get)=>{const m=new Map();arr(rows).forEach(r=>arr(get(r)).forEach(t=>m.set(t,(m.get(t)||0)+1)));return Array.from(m);};return Array.isArray(tc([{issues:null},{issues:{cleaning:undefined}}],ISSUE_DEFS.cleaning.select));}catch{return false}})());console.log('[SelfTests]',R.map(x=>`${x.pass?'✓':'✗'} ${x.n}`).join(' | '));}

ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
